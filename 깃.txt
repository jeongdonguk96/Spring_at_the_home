git: 작업트리 - 스테이지  - 저장소 3영역으로 구성

git config user.name "": 이름 등록
git config user.email "": 메일 등록
git remote add origin master(혹은 저장소의 깃주소): 깃허브의 해당 저장소와 연결
git remote -v: 연결 확인
git push -u origin master: 연결 후 최초의 푸쉬시에는 -u origin master를 적어줘야 함 이후에는 git push만으로도 가능

git status: 작업트리와 스테이지 영역에 있는 목록 조회
git log: 저장소 목록 조회
git diff: 추가된 파일 조회 (---: 파일 추가 버전 중 수정량 적은 버전, +++: 파일 추가 버전 중 수정량 많은 버전)
git add 파일명: 해당 파일명으로 스테이지에 밀어 넣기
git commit: 저장소로 밀어 넣기

git log --oneline: 저장소 목록 조회 짧게 요약
git log --stat: 저장소 목록 조회 자세한 정보
git commit -m "": 파일명명
git commit -am "": 저장소에 커밋했던 이력이 있는 파일을 바로 저장소에 넣으면서 오버라이딩할 때 사용

tracked: 저장소에 저장된 이력이 있음을 표시
untracked: 저장소에 저장된 이력이 없음을 표시
unmodified: 수정되지 않은 상태
modified: 저장소에 저장된 이력이 있으면서 수정한 후 아직 스테이지에 밀어 넣지 않은 상태
staged: 스테이지에 있으면서 아직 저장소에 커밋하지 않은 상태

git checkout -- 파일명: 작업 트리에서 수정한 파일 수정 이전 상태로 되돌리기
git reset HEAD 파일명: 스테이지 영역에 올라간 파일을 스테이지 영역에서 내림
                         (작업 트리에서 내용은 수정되지 않고 단순히 스테이지에서만 내림)
git reset --soft 해시코드: HEAD 바로 이전 버전으로 돌아가기(현재 작업하고 있는 내용 유지)
git reset --hard 해시코드: HEAD 바로 이전 버전으로 돌아가기(현재 작업하고 있는 내용도 삭제)
git revert 해시코드: HEAD 바로 이전 버전과 똑같은 파일을 새로 commit하는 것(이 파일이 HEAD가 됨)

no changes added to commit: 스테이지 영역에 아무런 파일이 없음을 알림
HEAD: 해당 파일이 최신 커밋파일임을 알림

git checkout 브랜치명: 해당 브랜치 영역으로 이동
git branch: 모든 브랜치 확인
git branch 브랜치명: 새로운 브랜치 생성
git branch -d 브랜치명: 브랜치 삭제
git log --oneline --branches: 모든 브랜치 정보 요약
git log --oneline --branches --graph: 모든 브랜치 정보 도식화 요약
git log 브랜치명1..브랜치명2: 브랜치2와 브랜치1을 비교해 브랜치2에만 있는 커밋 정보

git merge 브랜치명: 현재 작업하는 브랜치와 입력한 브랜치를 통합해 새로운 커밋을 만들어냄(현재 영역에서만)

git stash: 커밋 보류 중인 파일 감추기
git stash pop: 가장 최근에 감춘 파일 드러내기

git push: 깃허브에 저장
git pull: 깃허브에서 내려 받아 합치기
git fetch: 깃허브의 커밋 내려받기 (합치지 않음)
git checkout FETCH_HEAD: fetch로 내려받은 정보 조회
git merge FETCH_HEAD: fetch로 받은 커밋 통합

git clone 저장소의 깃주소 (작업공간명): 깃허브에 올라와있는 커밋 내려받기 (작업공간) 작성시 작업공간 별도 생성
